using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using Config;
using log4net;
using MadWizard.WinUSBNet;
using NativeLayer.Driver;
using NativeLayer.Driver.PNPUtilLib;

namespace ScpDriverInstaller.ScpComponents
{
    internal class Cleaner
    {
        private static readonly ILog Log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
        private IDriverStore DrvStore;
        private void CleanDrivers()
        {
            Log.InfoFormat("Searching the driver store...");
            var storeEntries = DrvStore.EnumeratePackages();

            foreach (var entry in storeEntries.Where(dse => dse.DriverPkgProvider.Equals("Scarlet.Crush Productions")))
            {
                Log.InfoFormat("Removing package from driver store: {0} by {1}", entry.DriverPublishedName, entry.DriverPkgProvider);
                DrvStore.DeletePackage(entry, true);
            }

            foreach (var entry in storeEntries.Where(dse => dse.DriverSignerName.Contains("libwdi autogenerated")
                                                        && dse.DriverPkgProvider.Equals("libusbK")))
            {
                Log.InfoFormat("Removing package from driver store: {0} by {1}", entry.DriverPublishedName, entry.DriverPkgProvider);
                DrvStore.DeletePackage(entry, true);
            }

            foreach (var entry in storeEntries.Where(dse => dse.DriverPkgProvider.Contains("MotioninJoy")))
            {
                Log.InfoFormat("Removing package from driver store: {0} by {1}", entry.DriverPublishedName, entry.DriverPkgProvider);
                DrvStore.DeletePackage(entry, true);
            }

            string DriverDirectory = Path.Combine(GlobalConfiguration.AppDirectory, "Driver");

            if (!Directory.Exists(DriverDirectory))
                return;

            foreach (var file in Directory.GetFiles(DriverDirectory)
                        .Where(f =>
                                Path.GetFileName(f).StartsWith($"{_infFilePrefix}_") &&
                                Path.GetExtension(f).ToLower().Equals(".inf")))
            {
                bool rebootRequired;
                Difx.Instance.Uninstall(file, DifxFlags.DRIVER_PACKAGE_DELETE_FILES, out rebootRequired);
                IsRebootRequired |= rebootRequired;
            }

            Guid deviceClassGuid;
            foreach (var device in USBDevice.GetDevices(deviceClassGuid))
            {
                Devcon.Remove(deviceClassGuid, device.DevicePath, null);
            }

        }

        private static readonly X509Store CertStore = new X509Store("root", StoreLocation.CurrentUser);

        private void CertStoreCleanUp()
        {
            CertStore.Open(OpenFlags.MaxAllowed);

            foreach (var cert in CertStore.Certificates.Cast<X509Certificate2>().Where(c => c.FriendlyName.Contains("libwdi")))
            {
                Log.InfoFormat("Removing certificate from root certificate store: {0}", cert.SubjectName.Name);
                CertStore.Remove(cert);
            }

            //Close the store.
            CertStore.Close();

        }
        public void Clean()
        {
            CleanDrivers();
            CertStoreCleanUp();
        }
    }
}
