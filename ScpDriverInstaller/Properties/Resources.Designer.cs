//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScpDriverInstaller.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ScpDriverInstaller.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt; Back.
        /// </summary>
        public static string Back {
            get {
                return ResourceManager.GetString("Back", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this step you can initialize one or more Bluetooth hosts..
        /// </summary>
        public static string BluetoothSetupDescription {
            get {
                return ResourceManager.GetString("BluetoothSetupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialized Bluetooth Hosts.
        /// </summary>
        public static string BluetoothSetupInitialized {
            get {
                return ResourceManager.GetString("BluetoothSetupInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing WinUSB driver on Bluetooth Host Devices.
        /// </summary>
        public static string BluetoothSetupInstalling {
            get {
                return ResourceManager.GetString("BluetoothSetupInstalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you haven&apos;t already please plug in your Bluetooth host device (a.k.a. Bluetooth dongle) now and wait until it appears in the list on the right..
        /// </summary>
        public static string BluetoothSetupPleasePlugIn {
            get {
                return ResourceManager.GetString("BluetoothSetupPleasePlugIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize all connected devices as Bluetooth Hosts.
        /// </summary>
        public static string BluetoothSetupStartInstall {
            get {
                return ResourceManager.GetString("BluetoothSetupStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bluetooth Hosts installed successfully.
        /// </summary>
        public static string BluetoothSetupSuccessInstruction {
            get {
                return ResourceManager.GetString("BluetoothSetupSuccessInstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install Bluetooth hosts.
        /// </summary>
        public static string BluetoothSetupTitle {
            get {
                return ResourceManager.GetString("BluetoothSetupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninitialized Bluetooth Hosts.
        /// </summary>
        public static string BluetoothSetupUninitialized {
            get {
                return ResourceManager.GetString("BluetoothSetupUninitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to first!.
        /// </summary>
        public static string BluetoothSetupWarningAfterLink {
            get {
                return ResourceManager.GetString("BluetoothSetupWarningAfterLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to sacrifice a dedicated Bluetooth dongle that will get reserved for use with wireless controllers only. If you&apos;re using a wireless mouse and/or keyboard via the listed dongle and install the driver, you will lose connection instantly and permanently! If you&apos;re unsure what to do next,.
        /// </summary>
        public static string BluetoothSetupWarningBeforeLink {
            get {
                return ResourceManager.GetString("BluetoothSetupWarningBeforeLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to please consult the documentation.
        /// </summary>
        public static string BluetoothSetupWarningLink {
            get {
                return ResourceManager.GetString("BluetoothSetupWarningLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string Cancel {
            get {
                return ResourceManager.GetString("Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this step you can initialize one or more DualShock 3/4 controllers..
        /// </summary>
        public static string DualShockSetupDescription {
            get {
                return ResourceManager.GetString("DualShockSetupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialized DualShock Controllers.
        /// </summary>
        public static string DualShockSetupInitialized {
            get {
                return ResourceManager.GetString("DualShockSetupInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing WinUSB driver on DualShock 3 Devices.
        /// </summary>
        public static string DualShockSetupInstalling3 {
            get {
                return ResourceManager.GetString("DualShockSetupInstalling3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing WinUSB driver on DualShock 4 Devices.
        /// </summary>
        public static string DualShockSetupInstalling4 {
            get {
                return ResourceManager.GetString("DualShockSetupInstalling4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you haven&apos;t already, please plug in your DualShock 3 (or 4) controller with the USB cable now and wait until it appears in the list on the right..
        /// </summary>
        public static string DualShockSetupPleasePlugIn {
            get {
                return ResourceManager.GetString("DualShockSetupPleasePlugIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize all connected devices as DualShock 3/4 Controllers.
        /// </summary>
        public static string DualShockSetupStartInstall {
            get {
                return ResourceManager.GetString("DualShockSetupStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DualShock controllers installed successfully.
        /// </summary>
        public static string DualShockSetupSuccessInstruction {
            get {
                return ResourceManager.GetString("DualShockSetupSuccessInstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install DualShock 3/4 Controllers.
        /// </summary>
        public static string DualShockSetupTitle {
            get {
                return ResourceManager.GetString("DualShockSetupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninitialized DualShock Controllers.
        /// </summary>
        public static string DualShockSetupUninitialized {
            get {
                return ResourceManager.GetString("DualShockSetupUninitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finish.
        /// </summary>
        public static string Finish {
            get {
                return ResourceManager.GetString("Finish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Once you finished this wizard, the main service will be started and your controllers connected automatically..
        /// </summary>
        public static string FinishedAutoService {
            get {
                return ResourceManager.GetString("FinishedAutoService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the last page in the process.
        /// </summary>
        public static string FinishedDescription {
            get {
                return ResourceManager.GetString("FinishedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to That&apos;s it! Wasn&apos;t so bad now was it? Enjoy your games!.
        /// </summary>
        public static string FinishedThatsIt {
            get {
                return ResourceManager.GetString("FinishedThatsIt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation finished.
        /// </summary>
        public static string FinishedTitle {
            get {
                return ResourceManager.GetString("FinishedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help.
        /// </summary>
        public static string Help {
            get {
                return ResourceManager.GetString("Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Next &gt;.
        /// </summary>
        public static string Next {
            get {
                return ResourceManager.GetString("Next", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reboot is required for the driver installation to complete. Please restart your machine after you finished this installation wizard..
        /// </summary>
        public static string RebootRequiredContent {
            get {
                return ResourceManager.GetString("RebootRequiredContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reboot required.
        /// </summary>
        public static string RebootRequiredTitle {
            get {
                return ResourceManager.GetString("RebootRequiredTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this step you can install the Windows Service..
        /// </summary>
        public static string ServiceSetupDescription {
            get {
                return ResourceManager.GetString("ServiceSetupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the service is already installed, it will automatically get started after the Driver Installer has finished..
        /// </summary>
        public static string ServiceSetupIfAlreadyPresent {
            get {
                return ResourceManager.GetString("ServiceSetupIfAlreadyPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is basically the core logic of the toolkit so installation is necessary for everything to function correctly..
        /// </summary>
        public static string ServiceSetupInstallationRequired {
            get {
                return ResourceManager.GetString("ServiceSetupInstallationRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing Windows Service.
        /// </summary>
        public static string ServiceSetupInstalling {
            get {
                return ResourceManager.GetString("ServiceSetupInstalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install Windows Service.
        /// </summary>
        public static string ServiceSetupStartInstall {
            get {
                return ResourceManager.GetString("ServiceSetupStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Congratulations! It looks like the service was installed properly, please proceed to the next step..
        /// </summary>
        public static string ServiceSetupSuccessContent {
            get {
                return ResourceManager.GetString("ServiceSetupSuccessContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service installed successfully.
        /// </summary>
        public static string ServiceSetupSuccessInstruction {
            get {
                return ResourceManager.GetString("ServiceSetupSuccessInstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install Windows Service.
        /// </summary>
        public static string ServiceSetupTitle {
            get {
                return ResourceManager.GetString("ServiceSetupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Handling USB/Bluetooth connections and translating data back and forth between controllers and the XInput emulator driver is done via a Windows Service..
        /// </summary>
        public static string ServiceSetupWhyIsItNeeded {
            get {
                return ResourceManager.GetString("ServiceSetupWhyIsItNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I&apos;m sorry to inform you that some of your devices weren&apos;t installed properly.
        ///
        ///Sadly, there are too many possibilities of why it failed to cram all suggested resolutions in one of these info boxes, but I can give you some hints on resolving the issue:
        ///
        ///1. Re-open this Driver Installer and simply try again. Seriously, try it.
        ///2. Reboot your machine. It&apos;s Windows, so it might help.
        ///3. Check your cabling. Your cat might have gnawed on your USB cable.
        ///4. Is your controller listen under &quot;Human Interface D [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SetupFailedContent {
            get {
                return ResourceManager.GetString("SetupFailedContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you can&apos;t resolve this issue by yourself, &lt;a href=&quot;https://github.com/nefarius/ScpToolkit/wiki&quot;&gt;check out the online documentation&lt;/a&gt;..
        /// </summary>
        public static string SetupFailedFooter {
            get {
                return ResourceManager.GetString("SetupFailedFooter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more installation tasks failed or did not complete.
        /// </summary>
        public static string SetupFailedInstructions {
            get {
                return ResourceManager.GetString("SetupFailedInstructions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation failed.
        /// </summary>
        public static string SetupFailedTitle {
            get {
                return ResourceManager.GetString("SetupFailedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installer result: {0} ({1}).
        /// </summary>
        public static string SetupFailedVerbose {
            get {
                return ResourceManager.GetString("SetupFailedVerbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the device doesn&apos;t show up after a few seconds, it&apos;s either already equipped with the right driver or in a faulty state..
        /// </summary>
        public static string SetupIfNotShowingUp {
            get {
                return ResourceManager.GetString("SetupIfNotShowingUp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Once your device becomes visible, hit the button below to start the driver installation process for this particular device..
        /// </summary>
        public static string SetupPleaseStartInstall {
            get {
                return ResourceManager.GetString("SetupPleaseStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Congratulations! It looks like the necessary drivers are in their proper place, please proceed to the next step..
        /// </summary>
        public static string SetupSuccessContent {
            get {
                return ResourceManager.GetString("SetupSuccessContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation successful.
        /// </summary>
        public static string SetupSuccessTitle {
            get {
                return ResourceManager.GetString("SetupSuccessTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ScpToolkit Driver Installer.
        /// </summary>
        public static string Title {
            get {
                return ResourceManager.GetString("Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing Virtual Bus Driver in Windows Driver Store.
        /// </summary>
        public static string VirtualBusSetupAddingDriverStore {
            get {
                return ResourceManager.GetString("VirtualBusSetupAddingDriverStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating Hardware ID for Virtual Bus.
        /// </summary>
        public static string VirtualBusSetupCreating {
            get {
                return ResourceManager.GetString("VirtualBusSetupCreating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this step you can install the virtual Xbox 360 Controller driver..
        /// </summary>
        public static string VirtualBusSetupDescription {
            get {
                return ResourceManager.GetString("VirtualBusSetupDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the virtual bus device is already present on your system (because you&apos;re upgrading from an older version of ScpServer/ScpToolkit or you&apos;ve used tools like DS4Windows before), its driver will be automatically updated..
        /// </summary>
        public static string VirtualBusSetupIfAlreadyPresent {
            get {
                return ResourceManager.GetString("VirtualBusSetupIfAlreadyPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing driver on Virtual Bus.
        /// </summary>
        public static string VirtualBusSetupInstalling {
            get {
                return ResourceManager.GetString("VirtualBusSetupInstalling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install virtual Xbox 360 Controller driver.
        /// </summary>
        public static string VirtualBusSetupStartInstall {
            get {
                return ResourceManager.GetString("VirtualBusSetupStartInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Virtual Bus installed successfully.
        /// </summary>
        public static string VirtualBusSetupSuccessInstruction {
            get {
                return ResourceManager.GetString("VirtualBusSetupSuccessInstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install Xbox 360 Controller emulator driver..
        /// </summary>
        public static string VirtualBusSetupTitle {
            get {
                return ResourceManager.GetString("VirtualBusSetupTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Virtual Bus might also be used by other 3rd party tools running on your system (like DS4Windows, InputMapper, FreePIE, etc.), please make sure they are all closed/shut down to avoid system reboot..
        /// </summary>
        public static string VirtualBusSetupToAvoidRestart {
            get {
                return ResourceManager.GetString("VirtualBusSetupToAvoidRestart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this step we will attempt to install the virtual Xbox 360 Controller emulator driver (a.k.a. Scarlett.Crush Productions Virtual Bus Driver, ScpVBus or just Virtual Bus)..
        /// </summary>
        public static string VirtualBusSetupWhatWeWillDo {
            get {
                return ResourceManager.GetString("VirtualBusSetupWhatWeWillDo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap Warning {
            get {
                object obj = ResourceManager.GetObject("Warning", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Wizard will walk you though the process of installing your Sony DualShock 3/4 controller(s) and/or Bluetooth hosts on your system..
        /// </summary>
        public static string WelcomeDescription {
            get {
                return ResourceManager.GetString("WelcomeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Greetings! This wizard will guide you through the installation process necessary to enjoy your Sony DualShock controller(s) on your Windows box and play Xbox-compatible (XInput) games using the DualShock!.
        /// </summary>
        public static string WelcomeGreetings {
            get {
                return ResourceManager.GetString("WelcomeGreetings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Welcome to the ScpToolkit Driver Installer.
        /// </summary>
        public static string WelcomeTitle {
            get {
                return ResourceManager.GetString("WelcomeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft Xbox 360 Controller driver.
        /// </summary>
        public static string Xbox360Driver {
            get {
                return ResourceManager.GetString("Xbox360Driver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is required to be installed separately..
        /// </summary>
        public static string Xbox360DriverNeededAfterLink {
            get {
                return ResourceManager.GetString("Xbox360DriverNeededAfterLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On Windows Vista/7 the.
        /// </summary>
        public static string Xbox360DriverNeededBeforeLink {
            get {
                return ResourceManager.GetString("Xbox360DriverNeededBeforeLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download and install the right edition before you continue this wizard..
        /// </summary>
        public static string Xbox360DriverNeededInstallBeforeContinuing {
            get {
                return ResourceManager.GetString("Xbox360DriverNeededInstallBeforeContinuing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft Xbox 360 Controller driver.
        /// </summary>
        public static string Xbox360DriverNeededLink {
            get {
                return ResourceManager.GetString("Xbox360DriverNeededLink", resourceCulture);
            }
        }
    }
}
